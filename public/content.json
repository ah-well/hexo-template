{"meta":{"title":"Well's Blog","subtitle":"Everything from Everywhere","description":"to be continue","author":"Well Lee","url":"http://ah-well.github.io"},"pages":[{"title":"","date":"2019-04-17T16:29:27.489Z","updated":"2019-04-17T16:29:27.489Z","comments":true,"path":"404.html","permalink":"http://ah-well.github.io/404.html","excerpt":"","text":"404 L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/koharu.model.json\"},\"display\":{\"position\":\"center\",\"width\":60,\"height\":120},\"mobile\":{\"show\":true},\"log\":false});"},{"title":"My Blog Name | 404","date":"2019-04-17T16:29:27.492Z","updated":"2019-04-17T16:29:27.492Z","comments":true,"path":"404/index.html","permalink":"http://ah-well.github.io/404/index.html","excerpt":"","text":""},{"title":"目录","date":"2018-07-10T06:53:53.000Z","updated":"2019-04-17T16:29:27.523Z","comments":false,"path":"categories/index.html","permalink":"http://ah-well.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2018-07-12T08:37:58.000Z","updated":"2019-04-17T16:29:27.520Z","comments":true,"path":"about/index.html","permalink":"http://ah-well.github.io/about/index.html","excerpt":"","text":"Well,it’s me!"},{"title":"标签","date":"2018-07-10T06:53:48.000Z","updated":"2019-04-17T16:29:27.528Z","comments":false,"path":"tags/index.html","permalink":"http://ah-well.github.io/tags/index.html","excerpt":"","text":""},{"title":"Indigo","date":"2019-04-17T16:29:27.526Z","updated":"2019-04-17T16:29:27.526Z","comments":true,"path":"custom/index.html","permalink":"http://ah-well.github.io/custom/index.html","excerpt":"","text":"Image image Blockquote 当blockquote、img、pre、figure为第一级内容时，在page布局中拥有card阴影，所有标题居中展示。 Content@card{ 目前的想法是预定义一系列内容模块，通过像输入 Markdown 标记一样来简单调用。好在 Markdown 没有把所有便于输入的符号占用，最终我定义了@moduleName{ ... }这种标记格式。如果你使用过Asp.Net MVC，一定会很熟悉这种用法，没错，就是razor。 page布局中的title和subtitle对应 Markdown 中的title和description。 基本的内容容器还是card，你可以这样使用card： 12345@card&#123;在`page`页中，建议把内容都放到`card`中。&#125; 需要注意的是：标记与内容之间必须空一行隔开。至于为何要这样，看到最后就明白了。 } Column@column-2{ @card{ 左与card标记类似，分栏的标记是这样的： 123456789@column-2 &#123; @card &#123; #左; &#125; @card &#123; #右; &#125;&#125; 为了移动端观感，当屏幕宽度小于 480 时，column将换行显示。 } @card{ 右column中的每一列具有等宽、等高的特点，最多支持三栏： 123456789101112131415161718192021@column-3&#123;@card&#123;左&#125;@card&#123;中&#125;@card&#123;右&#125;&#125; } } Three columns@column-3{ @card{ 话式片平九业影查类办细开被支，置军争里老 5 备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿 2 带杏性热求已。 } @card{ 话式片平九业影查类办细开被支，置军争里老 5 备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿 2 带杏性热求已。 } @card{ 话式片平九业影查类办细开被支，置军争里老 5 备才才目板。 且数置百容机，规的空界往，十陕志入。料解格清收权厂值动且习，识生能化路速年边，类儿 2 带杏性热求已。 } } Timeline@card{ 在timeline模块中，你的 5 号标题#####和六号标题######将被“征用”，用作时间线上的标记点： 12345@timeline &#123; ##### 2016 @item &#123; ######11月6日 为 Card theme 添加 page layout。; &#125;&#125; @item中多行内容可以换行输入，目前不允许隔行： 123456789@timeline &#123; ##### 2016 @item &#123; ######11月6日 第一行 第二行 /* ok */; &#125; @item &#123; ######11月6日 第一行 第二行 /* error */; &#125;&#125; } @timeline{ 2016@item{ 11 月 6 日为 Card theme 添加 page layout。加快绿化空间好看 } @item{ 10 月 31 日本地化多说。 } @item{ 10 月 24 日为 Indigo 主题创建 Card 分支。 } 2015@item{ 2 月 24 日发布 Indigo 主题到 hexo.io。 } @item{ 1 月 22 日创建 Indigo 主题。 } } CodeBlock123456// 自定义内容块实现page.content .replace(/&lt;p&gt;&#125;&lt;\\/p&gt;/g, \"&lt;/div&gt;\") .replace(/&lt;p&gt;@([\\w-]+)&#123;&lt;\\/p&gt;/g, function(match, $1) &#123; return '&lt;div class=\"' + $1 + '\"&gt;'; &#125;); @card{ 这里可以解释，为什么标记之间必须要隔一行了。 当你在 Markdown 中隔行输入时，会形成新的段落，而如果一个段落中的内容仅仅是我们约定的标记，就可以用很容易的用正则匹配到替换为对应的模块容器。 } End@card{ 为了解决 Hexo 自定义页面slug为空不能很好的使用多说评论这个问题，现在已经给每个自定义页面自动生成了hexo-page-path这种格式的slug。本来准备用date做格式的最后一节，测试中发现 page 中的date值为修改时间，是动态的。综合考虑使用了路径path。 以后可以根据需要添加更多模块支持。 打赏和评论默认开启，可根据需要在 Markdown 头部定义是否关闭。 }"}],"posts":[{"title":"inter-js","slug":"inter-js","date":"2019-05-16T12:20:45.000Z","updated":"2019-05-17T04:43:47.290Z","comments":true,"path":"2019/05/16/inter-js/","link":"","permalink":"http://ah-well.github.io/2019/05/16/inter-js/","excerpt":"","text":"call(), apply(), bind() 这三个函数都是用来完成函数调用，并且设置this指向。 call()和apply()是 ECMAScript3 标准引入，而bind()函数则是在 ECMAScript 5 引入。 面向对象 封装、继承、多态","categories":[],"tags":[]},{"title":"inter-frontend","slug":"inter-frontend","date":"2019-05-16T05:00:04.000Z","updated":"2019-05-17T04:43:04.783Z","comments":true,"path":"2019/05/16/inter-frontend/","link":"","permalink":"http://ah-well.github.io/2019/05/16/inter-frontend/","excerpt":"","text":"前端安全、性能问题 XSS 跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意的Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。 CSRF","categories":[],"tags":[]},{"title":"pack","slug":"pack","date":"2019-05-15T06:38:51.000Z","updated":"2019-05-15T09:12:18.653Z","comments":true,"path":"2019/05/15/pack/","link":"","permalink":"http://ah-well.github.io/2019/05/15/pack/","excerpt":"","text":"wepack webpack一些概念区别 bundle：是由webpack打包出来的文件 chunk：是指webpack在进行模块依赖分析的时候，代码分割出来的代码块 module：是开发中的单个模块 webpack gulp比较 webpack是一个模块打包器，强调的是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源都看成是模块，通过loader和plugin对资源进行处理。 gulp是一个前端自动化构建工具，强调的是前端开发的工作流程，可以通过配置一系列的task，第一task处理的事情（如代码压缩，合并，编译以及浏览器实时更新等）。然后定义这些执行顺序，来让glup执行这些task，从而构建项目的整个开发流程。自动化构建工具并不能把所有的模块打包到一起，也不能构建不同模块之间的依赖关系。 loader plugin loader用于加载某些资源文件。因为webpack本身只能打包common.js规范的js文件，对于其他资源如css，img等，是没有办法加载的，这时就需要对应的loader将资源转化，从而进行加载。 plugin用于扩展webpack的功能。不同于loader，plugin的功能更加丰富，比如压缩打包，优化，不只局限于资源的加载。 webpack-dev-server 和 http服务器的区别 webpack-dev-server使用内存来存储webpack开发环境下的打包文件，并且可以使用模块热更新，比传统的http服务对开发更加有效。 devServer配置 12345678910111213contentBase, // 为文件提供本地服务器port, // 监听端口，默认8080inline, // 设置为true,源文件发生改变自动刷新页面historyApiFallback // 依赖HTML5 history API,如果设置为true,所有的页面跳转指向index.htmldevServer:&#123; contentBase: './src' // 本地服务器所加载的页面所在的目录 historyApiFallback: true, // 不跳转 inline: true // 实时刷新&#125;//然后我们在根目录下创建一个'webpack.config.js'，在'package.json'添加两个命令用于本地开发和生产发布\"scripts\": &#123; \"start\": \"webpack-dev-server\", \"build\": \"webpack\" fis3gulp","categories":[],"tags":[]},{"title":"vue试题","slug":"inter-vue","date":"2019-05-14T15:16:33.000Z","updated":"2019-05-16T05:09:06.400Z","comments":true,"path":"2019/05/14/inter-vue/","link":"","permalink":"http://ah-well.github.io/2019/05/14/inter-vue/","excerpt":"","text":"vue试题 vue视图不会更新 data里边设置 $set nextTick() 在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中 vue路由导航钩子（） 全局导航钩子：分为前置守卫、后置钩子 前置守卫：router.beforeEach 1234const router = new VueRouter(&#123; ... &#125;);router.beforeEach((to, from, next) =&gt; &#123; // do someting&#125;); next 方法必须要调用，否则钩子函数无法 resolved to: Route，代表要进入的目标，它是一个路由对象 from: Route，代表当前正要离开的路由，同样也是一个路由对象 next: Function，这是一个必须需要调用的方法，而具体的执行效果则依赖 next 方法调用的参数next()：进入管道中的下一个钩子，如果全部的钩子执行完了，则导航的状态就是 confirmed（确认的）next(false)：这代表中断掉当前的导航，即 to 代表的路由对象不会进入，被中断，此时该表 URL 地址会被重置到 from 路由对应的地址next(‘/‘) 和 next({path: ‘/‘})：在中断掉当前导航的同时，跳转到一个不同的地址next(error)：如果传入参数是一个 Error 实例，那么导航被终止的同时会将错误传递给 router.onError() 注册过的回调 后置钩子： 12345router.afterEach((to, from) =&gt; &#123; // do someting&#125;);&gt; 不同于前置守卫，后置钩子并没有 next 函数，也不会改变导航本身 路由独享的钩子：单个路由独享的导航钩子，它是在路由配置上直接进行定义的","categories":[],"tags":[]},{"title":"memory","slug":"memory","date":"2019-05-12T12:42:41.000Z","updated":"2019-05-12T12:43:00.278Z","comments":true,"path":"2019/05/12/memory/","link":"","permalink":"http://ah-well.github.io/2019/05/12/memory/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"interview","slug":"interview","date":"2019-04-28T04:55:31.000Z","updated":"2019-05-16T12:04:53.056Z","comments":true,"path":"2019/04/28/interview/","link":"","permalink":"http://ah-well.github.io/2019/04/28/interview/","excerpt":"","text":"鉴于最近这段时间疯狂面试的体验，决定写一些文字记录下来。一切原因都是自身技术短板太多，以及性格上一定程度的缺陷吧！ 面试准备 简历（分电子档和纸质，看情况选择） 注意下外形（刮胡子之类的） 刷一波面试题 背包-雨伞-电源-充电器-充电线-手机 突出自己的优势（英文阅读、PS、后端基础） 面试流程 填写来客访问记录表 hr面（中间填写一些个人信息以及面试题，偶尔还有一些性格、心理、智商测试的题目 orz） 技术面（根据题目的反馈来对面试者进行第一次定位，然后在交谈中进行二次定位） hr二面（中间可能会有上机操作，也可能有复试） 注意事项 单双休、大小周，薪资，发薪日期 午休时间、加班情况 地段 业务项目（定制的是外包的说辞）、团队稳定 还需了解 基础框架 构建工具 持续集成 系统测试 上线部署 性能优化 监控统计 [ ] 前端跨域、安全、性能 http协议、状态码、https 数据类型（基本、引用），类型判断 原型链 懒加载、预加载 [ ] 节流防抖 [ ] call bind applay js原生、事件委托、组件开发 深、浅拷贝 闭包 递归函数 [ ] 回调函数 [ ] 盒子模型 垂直居中 css属性、css3新特性、动画animation、css hack 浏览器内核、h5新特性 meta、head标签里的东西 页面布局 移动端适配 [ ] 缓存问题、localStorage、sessionStorage、Cookie [ ] vue组件传值 底层原理、生命周期 virtual dom 路由导航钩子 [ ] 视图不更新 $set [ ] ES6、Promise、await/async shell、cmd、terminal websocket AMD、CMD docker镜像创建、启动、删除 jira TFS Ionic3+ 打包、测试、热更新 WebGL F2 [ ] highcharts [ ] rollup、 parcel、grunt、gulp、wepack [ ] 小程序图片批量上传、物联网TCP连接、OOS [ ] mpvue、 [ ] 参与开源项目 hybird 混合app开发 微信内嵌h5、浏览器内置h5 react、angular 微信小程序框架 Linux命令 node sql语句 接口","categories":[],"tags":[]},{"title":"GitLearn","slug":"gitLearn","date":"2019-04-11T07:56:23.000Z","updated":"2019-04-17T16:29:27.503Z","comments":true,"path":"2019/04/11/gitLearn/","link":"","permalink":"http://ah-well.github.io/2019/04/11/gitLearn/","excerpt":"","text":"什么是Git linus用C语言写的分布式版本控制系统。前者有CVS、SVN这些集中式的版本控制系统，但速度慢，且需联网，另有一些系统比这两者好用，不过需要付费，与Linux的开源精神不符，如BitKeeper。也正是它的东家BitMover公司因为开发Samba的Andrew试图破解BitKeeper的协议（据说不止他一个），要收回Linux社区的免费使用权，才迫使Linus在两周之内自己动手用C写了一个分布式版本控制系统。并在一个月内转移Linux的源码由Git来管理了。 集中式vs分布式 集中式和分布式，一个版本对应多个版本 集中式必须联网才能工作，无网络状态下无法回退到之前的某个版本 Git速度快、灵活，任意两个开发者之间可以很容易的解决冲突。 Git代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。学习周期长 Git基本概念 工作区：就是你在电脑里能看到的目录。 暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。 Git工作流 克隆 Git 资源作为工作目录。 在克隆的资源上添加或修改文件。 如果其他人修改了，你可以更新资源。 在提交前查看修改。 提交修改。 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。 git创建仓库1234567891011121314151617181920212223242526272829git init 在当前目录下创建Git仓库git init newrepo 使用指定目录作为Git仓库git add 命令可将该文件添加到缓存git status 命令用于查看项目的当前状态git status -s 简短的结果输出。如果没加该参数会详细输出内容git diff 显示已写入缓存与已修改但尚未写入缓存的改动的区别 git diff --cached 查看已缓存的改动 git diff HEAD 查看已缓存的与未缓存的所有改动 git diff --stat 显示摘要而非整个diffgit commit 记录缓存区的快照 git commit -m 记录缓存提供提交注释 git commit -a 跳过git add 提交缓存的流程git reset HEAD 取消缓存已缓存的内容 git reset HEAD -- [文件名] git rm 将文件从缓存区中移除，默认情况下，会将文件从缓存区和你的硬盘中（工作目录）删除 git rm --cached 在工作目录中留着该文件，仅删除缓存区的文件 git mv 相当于git rm --cached 有点多余// 初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。// 如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：git add *.c git add READMEgit commit -m &apos;initial project version&apos;// 从现有仓库克隆，如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：git clone [url] 分支管理12345git branch (branchname) 创建分支git checkout (branchname) 切换分支git merge 合并分支git branch 列出分支","categories":[],"tags":[]},{"title":"code","slug":"code","date":"2019-04-04T08:39:47.000Z","updated":"2019-04-17T16:29:27.497Z","comments":true,"path":"2019/04/04/code/","link":"","permalink":"http://ah-well.github.io/2019/04/04/code/","excerpt":"","text":"函数式编程 1['2', '3', '4'].map(parseInt) // [2, NaN, NaN] 因为 map 的算子是有两个参数的，第一个参数是被迭代数组的元素，第二个参数是该元素的下标。所以 [‘2’, ‘3’, ‘4’].map(parseInt) 实际上相当于执行了 [parseInt(‘2’, 0), parseInt(‘3’, 1), parseInt(‘4’, 2)]，结果就变成了 [2, NaN, NaN] 了。","categories":[],"tags":[{"name":"题目","slug":"题目","permalink":"http://ah-well.github.io/tags/题目/"}]},{"title":"JS Object","slug":"JSObject","date":"2019-04-04T03:36:07.000Z","updated":"2019-04-17T16:29:27.496Z","comments":true,"path":"2019/04/04/JSObject/","link":"","permalink":"http://ah-well.github.io/2019/04/04/JSObject/","excerpt":"","text":"在JavaScript的世界里万物皆对象 123456789typeof 123; // 'number'typeof NaN; // 'number'typeof 'str'; // 'string'typeof true; // 'boolean'typeof undefined; // 'undefined'typeof Math.abs; // 'function'typeof null; // 'object'typeof []; // 'object'typeof &#123;&#125;; // 'object' 可见，number、string、boolean、function和undefined有别于其他类型。特别注意null的类型是object，Array的类型也是object，如果我们用typeof将无法区分出null、Array和通常意义上的object——{}。 注意一下几点 不要使用new Number()、new Boolean()、new String()创建包装对象； 用parseInt()或parseFloat()来转换任意类型到number； 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法； 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {…}； typeof操作符可以判断出number、boolean、string、function和undefined； 判断Array要使用Array.isArray(arr)； 判断null请使用myVar === null； 判断某个全局变量是否存在用typeof window.myVar === ‘undefined’； 函数内部判断某个变量是否存在用typeof myVar === ‘undefined’。 Date 里的月份是从0开始","categories":[],"tags":[]},{"title":"记录sublime的一些快捷键和插件","slug":"sublime","date":"2019-04-03T09:05:58.000Z","updated":"2019-04-17T16:29:27.516Z","comments":true,"path":"2019/04/03/sublime/","link":"","permalink":"http://ah-well.github.io/2019/04/03/sublime/","excerpt":"","text":"插件 SublimeLinter Sublime CodeIntel Bracket Highlighter CSScomb SublimeTmpl =快速生成文件模板 SideBarEnhancements ColorPicker ctrl+shift+c Tag = Html格式化 GBK to UTF8 =GBK转黄成UTF8 Alignment Ctrl+Alt+A Emmet Prefixr AutoFileName CodeFormatter ConvertToUTF8 DocBlockr JsFormat Terminal Ctrl+Shift+T呼出命令行窗口 git：git jQuery：jQuery ConvertToUTF8：转码成utf-8，解决乱码 Sass LESS Less2CSS 功能：编译Less 简介：监测到文件改动时，编译保存为.css文件 GOanything IMESupport 功能：sublime中文输入法 Ctrl + Shift + P →输入pci →输入IMESupport →回车 FileDiffs 比较代码不同 CanIUse 如果您想检查浏览器是否支持你包括在你的代码中的CSS和HTML元素，那么这是你需要的插件。所有您需要做的就是选择有疑问的元素，插件将为你做其余的事情。 Tag HTML/XML标签缩进、补全、排版和校验工具 Trimmer TrailingSpaces Trimmer Clipboard History 功能：粘贴板历史记录 MarkdownEditingPHPTidy =排版PHP代码 YUI Compressor =压缩JS和CSS文件 Clipboard History = 剪贴板历史记录 快捷键 光标类 Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。 Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。 Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。 Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。 Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。 Ctrl+M 光标移动至括号内结束或开始的位置。 Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。 Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。 Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。 Ctrl+Shift+] 选中代码，按下快捷键，展开代码。 Ctrl+K+0 展开所有折叠代码。 Ctrl+← 向左单位性地移动光标，快速移动光标。 Ctrl+→ 向右单位性地移动光标，快速移动光标。 shift+↑ 向上选中多行。 shift+↓ 向下选中多行。 Shift+← 向左选中文本。 Shift+→ 向右选中文本。 Ctrl+Shift+← 向左单位性地选中文本。 Ctrl+Shift+→ 向右单位性地选中文本。 Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。 Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。 Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。 Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。 编辑类 Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。 Ctrl+Shift+D 复制光标所在整行，插入到下一行。 Tab 向右缩进。 Shift+Tab 向左缩进。 Ctrl+K+K 从光标处开始删除代码至行尾。 Ctrl+Shift+K 删除整行。 Ctrl+/ 注释单行。 Ctrl+Shift+/ 注释多行。 Ctrl+K+U 转换大写。 Ctrl+K+L 转换小写。 Ctrl+Z 撤销。 Ctrl+Y 恢复撤销。 Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。 Ctrl+F2 设置书签 Ctrl+T 左右字母互换。 F6 单词检测拼写 搜索类 Ctrl+F 打开底部搜索框，查找关键字。 Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。 Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。 Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。 Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。 Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。 Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。 Esc 退出光标多行选择，退出搜索框，命令框等。 显示类 Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。 Ctrl+PageDown 向左切换当前窗口的标签页。 Ctrl+PageUp 向右切换当前窗口的标签页。 Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字） Alt+Shift+2 左右分屏-2列 Alt+Shift+3 左右分屏-3列 Alt+Shift+4 左右分屏-4列 Alt+Shift+5 等分4屏 Alt+Shift+8 垂直分屏-2屏 Alt+Shift+9 垂直分屏-3屏 Ctrl+K+B 开启/关闭侧边栏。 F11 全屏模式 Shift+F11 免打扰模式","categories":[],"tags":[{"name":"编辑器","slug":"编辑器","permalink":"http://ah-well.github.io/tags/编辑器/"}]},{"title":"something","slug":"something","date":"2019-04-03T06:21:38.000Z","updated":"2019-05-15T09:00:18.299Z","comments":true,"path":"2019/04/03/something/","link":"","permalink":"http://ah-well.github.io/2019/04/03/something/","excerpt":"","text":"something else Any words I won’t say to them, I only want to develop myself firstly. I am tired.And I have to keep sadness and grief away from me. Now I should read more technical books and practice more codes. Anything I won’t think about all the day, just do it. I will keep myself learning something new, both technology and life. 怎么说吧，现阶段挺尴尬的，周围也尽是相似的风景，坚持自己的初心吧。","categories":[],"tags":[]},{"title":"computer","slug":"computer","date":"2019-04-02T10:06:42.000Z","updated":"2019-04-17T16:29:27.498Z","comments":true,"path":"2019/04/02/computer/","link":"","permalink":"http://ah-well.github.io/2019/04/02/computer/","excerpt":"","text":"二进制 二叉树 进程 线程 网络协议","categories":[],"tags":[{"name":"计算机","slug":"计算机","permalink":"http://ah-well.github.io/tags/计算机/"}]},{"title":"js basic","slug":"js","date":"2019-04-02T06:30:43.000Z","updated":"2019-04-17T16:29:27.507Z","comments":true,"path":"2019/04/02/js/","link":"","permalink":"http://ah-well.github.io/2019/04/02/js/","excerpt":"","text":"js 变量（大小写敏感）分类 Number（数字） String（字符串） Boolean（布尔） Symbol（符号） （第六版新增） Object（对象） - 由键-值组成的无序集合 Function（函数） (严格意义上也算Object) Array（数组） - 有序集合 Date（日期） RegExp（正则表达式） Null（空） Undefined（未定义） JavaScript 还有一种内置Error（错误）类型 数字 JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型： 123456123; // 整数1230.456; // 浮点数0.4561.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5-99; // 负数NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示Infinity; // 表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity 0.1 + 0.2 = 0.30000000000000004 字符串 JavaScript 中的字符串是一串Unicode 字符序列 布尔值 通过布尔运算计算出来的结果 undefined null JavaScript 允许声明变量但不对其赋值，一个未被赋值的变量就是 undefined 类型。还有一点需要说明的是，undefined 实际上是一个不允许修改的常量。 null表示一个空值（non-value），必须使用null关键字才能访问 strict模式JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：1i = 10; // i现在是全局变量 对象 JavaScript用一个{…}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。 访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用’’括起来： 1234var xiaohong = &#123; name: '小红', 'middle-school': 'No.1 Middle School'&#125;; xiaohong的属性名middle-school不是一个有效的变量，就需要用’’括起来。访问这个属性也无法使用.操作符，必须用[‘xxx’]来访问： 如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回undefined： 由于JavaScript的对象是动态类型(这意味着相同的变量可用作不同的类型)，你可以自由地给一个对象添加或删除属性： 如果我们要检测xiaoming是否拥有某一属性，可以用in操作符, 不过要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的： 12345678910111213141516171819202122var xiaoming = &#123; name: '小明', birth: 1990, school: 'No.1 Middle School', height: 1.70, weight: 65, score: null&#125;;'name' in xiaoming; // true'grade' in xiaoming; // false'toString' in xiaoming; // truevar xiaoming = &#123; name: '小明'&#125;;xiaoming.hasOwnProperty('name'); // truexiaoming.hasOwnProperty('toString'); // false// 声明空对象的两种方法var obj = new Object();var obj = &#123;&#125;; 因为toString定义在object对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性。要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法 声明变量关键字 let const var let 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。 const 允许声明一个不可变的常量。这个常量在定义域内总是可见的。 var 是最常见的声明变量的关键字。它没有其他两个关键字的种种限制。这是因为它是传统上在 JavaScript 声明变量的唯一方法。使用 var 声明的变量在它所声明的整个函数都是可见的。 JavaScript 与其他语言的（如 Java）的重要区别是在 JavaScript 中语句块（blocks）是没有作用域的，只有函数有作用域。因此如果在一个复合语句中（如 if 控制结构中）使用 var 声明一个变量，那么它的作用域是整个函数（复合语句在函数中）。 但是从 ECMAScript Edition 6 开始将有所不同的， let 和 const 关键字允许你创建块作用域的变量。 声明变量类型 用new来声明。JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。 数组 Array.length 并不总是等于数组中元素的个数123var a = [\"dog\", \"cat\", \"hen\"];a[100] = \"fox\";a.length; // 101 控制结构循环 for for…of循环，ES2015 引入了更加简洁的，可以用它来遍历可迭代对象，例如数组： 123for (const currentValue of a) &#123; // Do something with currentValue&#125; for…in 注意，如果有人向 Array.prototype 添加了新的属性，使用这样的循环这些属性也同样会被遍历。所以并不推荐使用这种方法遍历数组： forEach() while do…while do…while循环体会至少执行1次，而for和while循环则可能一次都不执行。 执行环境和作用域 执行环境（execution context，为简单起见，有时也称为“环境”）是 JavaScript 中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。 全局执行环境是最外围的一个执行环境。根据 ECMAScript 实现所在的宿主环境不同，表示执行环境的对象也不一样。在 Web 浏览器中，全局执行环境被认为是 window 对象（第 7 章将详细讨论），因此所有全局变量和函数都是作为 window 对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。 每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript 程序中的执行流正是由这个方便的机制控制着。 当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。 标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。 函数参数也被当作变量来对待，因此其访问规则与执行环境中的其他变量相同。 P.S.本文部分内容参考了 廖雪峰博客 、 MDN Web docs","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://ah-well.github.io/tags/js/"}]},{"title":"language leraning","slug":"language","date":"2019-03-22T02:55:14.000Z","updated":"2019-04-28T06:43:22.235Z","comments":true,"path":"2019/03/22/language/","link":"","permalink":"http://ah-well.github.io/2019/03/22/language/","excerpt":"","text":"偶尔还是得学习下一两门外语的语言规则，发音什么的一边去 from zero to hero underdog 弱旅（实力比较弱的队伍，俗称下狗） 功不唐捐 佛家语，指功夫不会白白地抛弃。”唐”意为“白白的，徒然的”。 You will end up reinventing Wordpress, in a horrible way. 你将以一种糟糕的方式重新使用wp tit for tat 以牙还牙 短语 end up &lt;非正&gt;（以…）结束; 最终成为[变得]; 最后处于;","categories":[],"tags":[{"name":"learn","slug":"learn","permalink":"http://ah-well.github.io/tags/learn/"},{"name":"English","slug":"English","permalink":"http://ah-well.github.io/tags/English/"},{"name":"Japanese","slug":"Japanese","permalink":"http://ah-well.github.io/tags/Japanese/"}]},{"title":"Gallery","slug":"Gallery","date":"2019-01-15T09:45:50.000Z","updated":"2019-04-17T16:29:27.494Z","comments":true,"path":"2019/01/15/Gallery/","link":"","permalink":"http://ah-well.github.io/2019/01/15/Gallery/","excerpt":"","text":"","categories":[],"tags":[{"name":"相册","slug":"相册","permalink":"http://ah-well.github.io/tags/相册/"}]},{"title":"记一次工作之余的体会","slug":"winetable","date":"2018-08-09T16:48:53.000Z","updated":"2019-04-17T16:29:27.518Z","comments":true,"path":"2018/08/10/winetable/","link":"","permalink":"http://ah-well.github.io/2018/08/10/winetable/","excerpt":"PS：文章需要密码才能查看全文！","text":"文章需要访问密码！ 请输入访问密码 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","categories":[{"name":"code","slug":"code","permalink":"http://ah-well.github.io/categories/code/"},{"name":"blog","slug":"code/blog","permalink":"http://ah-well.github.io/categories/code/blog/"}],"tags":[{"name":"酒桌场合","slug":"酒桌场合","permalink":"http://ah-well.github.io/tags/酒桌场合/"}]},{"title":"前端与协议","slug":"protocol","date":"2018-08-02T16:53:53.000Z","updated":"2019-04-17T16:29:27.510Z","comments":true,"path":"2018/08/03/protocol/","link":"","permalink":"http://ah-well.github.io/2018/08/03/protocol/","excerpt":"","text":"协议的定义 前端与服务端之间的交互数据通信，可以认为是全后端开发者之间主观协商形成的一层数据接口规范。 分类 http协议 基于SSL(Secure Sockets Layer,安全套接字层)的https协议 移动端Web脚本与移动端Native原生程序交互的协议 HTML5的WebSocket实时通信协议 与服务端交互的RESTful协议","categories":[{"name":"code","slug":"code","permalink":"http://ah-well.github.io/categories/code/"},{"name":"blog","slug":"code/blog","permalink":"http://ah-well.github.io/categories/code/blog/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://ah-well.github.io/tags/前端/"},{"name":"协议","slug":"协议","permalink":"http://ah-well.github.io/tags/协议/"}]},{"title":"压抑的一天","slug":"sad","date":"2018-07-15T15:36:53.000Z","updated":"2019-04-17T16:29:27.511Z","comments":true,"path":"2018/07/15/sad/","link":"","permalink":"http://ah-well.github.io/2018/07/15/sad/","excerpt":"","text":"搬完新家的第一天，跟家里人在微信通了几次电话和视频。恰巧最近几天碰上台风天气，昨晚没带伞淋了一身的雨水，抬抬头仰望路灯下微微倾斜的雨滴，显得有些凄冷。 心里一直惦记着几件事，一个是 6k，一个是未知的前途，兜兜转转，总觉得自己能力不足，干不了什么事情，对待身边的亲人有时候又太苛刻。对自己的父亲表示出疑心，导致他内心对我的一番悲叹。这么多年了，我是一点一点长大了，他又是在一点一点老去…… 这个时间段，三弟没打工去龙港学电商，家里那边电器行情不景气，老妈吃着苦跑去夹铁，二弟又是做三歇四，老豆他又只能靠记码收别人的脸色账。我实在是不知道自己现在还能到坚持什么时候，自己给自己积极的暗示真的很重要，有时候又很希望别人能够拉我一把，不过现实终究是不可能的。始终还是得靠自己突破这层障碍。 细细想想我真的时间不多了，","categories":[{"name":"生活","slug":"生活","permalink":"http://ah-well.github.io/categories/生活/"}],"tags":[{"name":"bad","slug":"bad","permalink":"http://ah-well.github.io/tags/bad/"}]},{"title":"时间表","slug":"schedule","date":"2018-07-11T03:40:30.000Z","updated":"2019-04-17T16:29:27.512Z","comments":true,"path":"2018/07/11/schedule/","link":"","permalink":"http://ah-well.github.io/2018/07/11/schedule/","excerpt":"PS：文章需要密码才能查看全文！","text":"文章需要访问密码！ 请输入访问密码 U2FsdGVkX1+dNk8yZDJEeuiyLeg9GTw16TQROWpaZrkz2rMxE2gIzJjZKH3a4sHZeFAXn2cKu9Av2NVPMkz7O51k26EaT2p/CpWnOAk0HcurCkoTvPhCP5J1R2YocRgLuuPYjccYrrQVzzjlKpSWhpwDiLcbIHjFJSgAHveOKaufzU4FFFKiZFg1kC/FXr2VsrUktgD/jY5AVX2XjdoasLGOrIM/8T8XGDBYoxJ9GyKyYchsLijRuDKrpOrsqLD0YRMwWaO8mTMlNU6zem2JL5NblD8nN/fUD5x2aue3QVDr+FrtpZ5s4JFYbtE3WzhTazekh5VsorytC3t9ApksSwSRvB5YFC5wOYZurMrc/2NabfKpNPL2BKvgZh92gWcP5ybLqsjhsCZp69xxBEm/pBtq+4AkZ897hzARCuzZBchewwzffX8CC5WppytZetsivJy204ozynMq8op2IqpqbX7Na2st9wrxYtHANOeat/USX/y58UxKgKCsPJeiHZIkfwMIiKxa8PhwF3PHke7MJ04XEhc3XCEHnyoLvESyiQAJDsx5QIAkAUX80UqFDbWxnlyvYCNxTfSqAR31yijjUwrbCjVK1Fcxg4ZW4CAwf6AHNUttSOEbLjbCwh/CQP9+fWZlcFN74fHla9NcsuSPvrbo+5varxHGlLpDZnbVHBHAKEdaDrE0Gsx8hVMBy+DMeE1+l18jPaI6gm92cIf6Vj94DtVcc9tiFq8jeUg77J9duGrt4hNNJz5Ha2lRIKOSiNigX6+A8CvWI3kpNIdG+8y8U9483wk7ZZo38jXSvIwtvHzvsch/U2aw2CQOhnBCdf/YBSqsqpy14SBLu3le+aeBhraiQm6Mltl0PAO1jBQJXS2pRFNXnBiboxs9SN2aAZl4SvZWeLVGh2ggOVFsOtnhTPV71AzZyyOnwS+a2VBfNbHEHMwCd5blyVySPIvbWD9xvKNMoXzgBSQVdoxRuDj6imOlzGSt9bqEdBzv8DCgWF7/JZ5Xf3Mmvxj7lPLV3Czxc2Sznss+8Cn/UAJ5gXQo/iT4D9nxSvKbQkyBQaqXtybkE2w08LUuEMuBJ+M5r8/EGqlYho52sp/qcDlC6xjvSLB5sXpwpJyKe2991GFgsp3ZV5xYm7kPwDvsqQRrjVjsDgKPPbxlM26497tpGzNpXOs0lOr36hU+t7xmfWFPyLn+k1Nh07I3KbOyJgGRcmtwDhDgbKexyEsimDMuDGqB30iFvRv39hdXhmZsEw0kJOSLgO2nr2MYItuTGLsAwqyWeoRQPVZvtWs0yeB1YwgJKLgm7Y/4rePcmv6+zgufPCmQLfVXn9PG2US/3hhhggjYdNYBPdd23cvdzONO1rZC36S6tKY8p+mVgcrLYSlFpmLOv1h7wUTCxLF2taYZUzGAvWAqqBUYk5w6+/HKB4Siq/BWcuKE6ZCmaDgS3Q8vxJcLrumebGa6lIgCaYYezbHM2VK5xeXWRFGpDGHqJYMDWDqQZlfRe7f4/koTzM09MF/Ha1Q5mKgHc1sjQWlZRTVdW0FjvnaxUIxDA3WWjK3cTHmwkrpyyqgI4LcCFzG85ztn7qRJrJKsjU36M/DVsA8G3XMlBajpE4d1cH3IQlDmMRibv1RaRoYgZ0JQsZZVcsiCHe5uOvU1r6JmmlWxi5/5MX5+J+yo4upPFlLyZy4pO5WNRV+jR0OzDh5vizmHOEvN9F+7k4rMJm/epHPCDBR5SA2OmU+qX6Zgk3wimw6335ve8XqWgLYlTKsrYu5TbrLkKInRTE/qGJHqFK5IEhCwywsYo9oPQnNwSK1o4vKJTqTYXpK81ZnSP40aZ9F4H1n5HhX4QJsXpWhQl4S4sTsk4DgCxVAZIFCV9Y8kpeAsEhwf6jI1XlEBXY5pUUiX1gUdsDIeA19Pbr02xBCP84qn1TPGgAcreIp9FlD3i+YiRPQufzj3T+VG8mEi4MaB2dRcfEBdixF/9+WxKsR7EM0hmC2OkEEm4cGzwyS3kifQ/Xw3k9Nr5j81VtDtqADRq+eAebz/r1WCoYNBiaq1/A/jh2ux7BZoXReGFj7BC0lWbfQYV/2IiElomJ1iD6p/WPmvh/eSZ3+JSgTnwTjdNRdiHXuRok6otkVJisVcl/N56ty298vJbQA4BGAtqU5bxOrdFcM2/AM5lV5bRxFvs8vBziNaP2zUb//AK6ClDvtg3sWm7PISOxSeADYyxFZoMRNs6UBTsyZLgXDcWFPujKTm0wpXgbUVG0618DS6soN6mqJyBitnUGcqVywkfdmk6SvRBq+ykv57drpbUa+YVGSgFRxbTU+Xj0K6jkfM2ZY89oUTbefmgZlmqt34dqHxCHSQPy5cj74ivfYaY4uRuwsLeILt8X8zoHCOgFaa6a9TYiFLvxiblePRGvOroKGDjdL5wQ8CSxThrN8aAiWqKCZwuybRvE/eJ6UhL2QcGL92LQ9piAo8LOQjH6ouxoMrl/rnfVvNNdy4q8xjmm2vNslDS9wtbxUVngNlj6u6H93UPR09Uzh6SW3xQidxPlANxyr2zUQHBv6N+DyePxR4nUsLG+M6HjKN9Ky3Y8Xr+GImareb/rtJ+01EPilXIx3n4DBXpPJQ6tro9p+pZiHI0nLu3jvsGmMcXI1pQjFdaZ4WHREJ29zXo3Z7ZUP0kMYkx9lMR3tT0htd+JZwHH/m7F7Ywg5htzr5KiMDYKuzbhvQVEndfQb3NOUa7jBfCA+c06wlJsNycbWQUsmnNJy/AKhyrO0aMk67UxiMoAgERE7gbS8lWlQcTFz4EKEA2wkdDW13jOrFxGFTdckWz4hwR6RT17+fWEgPrEJCSOX0L93sEKTsFGLrtOMqVsXar/y+UCKfvOS/O/aJWBEREAjbVgJhCN6zIWfzOh5dLbpgPUj8vk9Ucjm/mFC1Hf/x9HJ4npxv7i6TZ0Qo+wwQ/obU/v+QdedAGiiCiFiJWTuPjAENq5cPjIMXu/bO3vphKw3ljU+A3Wpyx5Om6dPfHuQSPZfK/VmWwkPUHCsvmAByNJolmdsSRXQwdJQWiK3P2yUHa4zQtWdxZ00REmYRTbGYx4eDlNjNEYl1XOh5FgIXkUQEoXRnrJfGGn2HwIsvFQtdZosTkIC4qNISuAOO20dqTJY2P/C7SokIJux7n90soyMbbC6EVWUfVYi2d3KA/WrhYh2h59BqMWa81hXuTuhhtB7fYpNbOX3JPLiQMyR0hB8do6+CfvPyU0y873CObfqziF0okP6pdTk8tY27QgJQeRJxCo/NHKRN/6nS0vCCYCEgFJv3tHAl/QFs8lo6acXpKtUrh5sVKDfkSNjmcH5rNKT31klrderxa44Y7jebTlIS3LRth8JpoxuaUeaY9YNHp0mZ/7FvHM8ue+oWj3tpFxbWz9vP5iieMdri76YeGHGsoGPrTZHTI21Sd/fGKa7jYPlUPAWKqYi0te5SO6F4N1VtC+J9WSmTIGhXTPGTaeso9drMLaIRWhuB2bgupMF2lUhRB4U0fTS/y4xRuhbmVK06Ipg3Vjx7MLDBdq2VCfs7rNG9+0ZQ84o5EYAs62BlApOI5NW2/Tfk9ZKvXXLRsF+XAQgicKhzcDw3vnN5gA+p98aownzYv8T3eUmm7zjrxQ+gad9c3QZtaUmH9rOrH4SLesq5+uKdvxMm4vtNV3x4FOgHHn3g17uUWmuYxUcNqtJX6U8aHKUFZYns/iSUuDY9vWKg6Kd6XdIfKRjPPQug5pWfrKjgdNv2NlI411XZM/oY4nIgX+FXmny1FfhU5WvO0aBssvqIXXh2vFFoSx05CducIrXY0bemWCuHgw8PHuW+HIOQb8Db207eKF0ESGv+u68iHyrmR5mIjoIxAZwIYk2skgD0IRsseNbu364tg98TqY9Jrj8dd/AdzZj6X96YBfsd4glrGinzjg9ZVI2r7mddM2BitOw4CKWt2KO6Fp9GlgpM/lNMSJvfD5bP9O9Prm8BY3DFFQiXZGBfWsrSiA5OvhzLV2dVZDM5zI6cpQQrUVgCJqahXCCIvD86PJ4rg7WVMKL/jpiVZ5eOQfCGyo9u8J/klO/S3/6VO/UYCmieDBYb2ar5dXikE3vlhWDraZh+RzSR5u5wZwW5vkzPJ/aSOhZGG7nEaOWofB3wCd7eZAG+wcJnlPhUiQ5ywgub0EXhEgBFdV/0MNAfTIGCOct3ifAx8IKbULEoCGXDHw1Z9X+32ES5lvbWgoV0OGdnXfj6K92NmwN2vMaai5DoBuZ0gmxNz6bpTeAMNz4OYDFPcO4pF++TIObV2tImrW7LaPLKGqAvHDSsE/PQI125N3rDegYEOds6082bTlZTCMBEtfqI60Z1G3Rm6BEK2pqWC0LNbkKPoQSSFETW3bgcO+NE6/SY27UT6I4CkqY56uNbD+zSKBYBuPnuVi1WuMjtg9Z9vEIZHIHYt5OnVvcQj+0rtYkBn4bSODikU2XRW3xX6co7lZ2LDC33XaWx4bo8FXkFC5rcC+Ej+c/sU0anIfbTr9RW7Rl880celUan/cO5iIBRiazv9tJv8ki8uV1B2EICfL66gQcuL+049serIUGx+D2hGL2tRsEtZw9Sdme3MdNSE6sUFpIXuywnu4IGC+fvpfvGnZ0mkVwLCRPMEPbF+wPc4Jf42rZ2VtyX9+tENmQORtXKme8WcgMNHDhziXJ53pT7H+Af5C89WMLnXnKllQ7JsXNV9/sfCelU20pZlkjJIiBK/NHiJkz6cViisJ10EPhoKHf5LdDfyo++Erd1anU19ohdoBJzUIZE2Xz8sgFKkkDey0UHu94PguLigGZRQhsj0VEtlZdxIp0C+l+3hiPY+ocHdpPzlgHBDah8bOf1Rqxj1bzuEC+betKmwde24R6Cx4iXyetSoMB8F9906S0agaFLlh6CYJ3ONcosip3Pwle75NPoAiRqEJKeiRKXkh6MyMDm/hfBAGD21KUyVVLq+z0j/KFbLfVynYE8Egz2FRGCRL9Hnevee+yCSDjKztbSwtWuVWLk4HPy96NSU3BmIDY1Geu+kg37I7htkpAxsDvJJfDbhRkUzS5EHwP7HAXLJH33bsr3P9PWv+DezovAwjH02wFdryYxbCzhIxigkbGayxq1ANklQI6OTF2XTSSKBHUP3GFcb0GO8gq7Yr6C3daEKV9AtTNcz9dFHXt3b4riPsFXtFSN/q7NmuBbiv6cN299mO0+szcNlXk1EtzybOyLNeNk0BdvDtj5SVTTzd4djFOBt3fPyP9l1uiv3ksAI0nNPWdqd9TPOAjHsy2sVHeOuwLqTKQ=","categories":[{"name":"生活","slug":"生活","permalink":"http://ah-well.github.io/categories/生活/"}],"tags":[{"name":"杂念","slug":"杂念","permalink":"http://ah-well.github.io/tags/杂念/"}]},{"title":"困意","slug":"sleep","date":"2018-07-10T08:01:27.000Z","updated":"2019-04-17T16:29:27.514Z","comments":true,"path":"2018/07/10/sleep/","link":"","permalink":"http://ah-well.github.io/2018/07/10/sleep/","excerpt":"摘要","text":"文章需要访问密码！ 请输入访问密码 U2FsdGVkX18y+eN50FFzF/VzA3be/+hI2rd2OeTMuLI=","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-07-10T07:36:53.000Z","updated":"2019-04-17T16:29:27.505Z","comments":true,"path":"2018/07/10/hello-world/","link":"","permalink":"http://ah-well.github.io/2018/07/10/hello-world/","excerpt":"","text":"总觉得自己物质世界不一定要非常富有，但内心世界一定要足够富裕。写下一篇篇关于自己部分经历的心情、体会，记录下自己的点滴好与不好。 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"碎碎念","slug":"碎碎念","permalink":"http://ah-well.github.io/categories/碎碎念/"}],"tags":[{"name":"hello","slug":"hello","permalink":"http://ah-well.github.io/tags/hello/"},{"name":"js","slug":"js","permalink":"http://ah-well.github.io/tags/js/"}]},{"title":"bad feelings","slug":"feeling","date":"2018-07-10T07:18:27.000Z","updated":"2019-04-17T16:29:27.500Z","comments":true,"path":"2018/07/10/feeling/","link":"","permalink":"http://ah-well.github.io/2018/07/10/feeling/","excerpt":"PS：文章需要密码才能查看全文！","text":"文章需要访问密码！ 请输入访问密码 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","categories":[{"name":"负能量","slug":"负能量","permalink":"http://ah-well.github.io/categories/负能量/"}],"tags":[{"name":"回忆","slug":"回忆","permalink":"http://ah-well.github.io/tags/回忆/"}]},{"title":"first article","slug":"first","date":"2018-07-10T06:26:06.000Z","updated":"2019-04-17T16:29:27.501Z","comments":true,"path":"2018/07/10/first/","link":"","permalink":"http://ah-well.github.io/2018/07/10/first/","excerpt":"","text":"Welcome to my blog(https://ah-well.coding.me) 万事开头易 兜兜转转，通过网络各种资源，慢慢悠悠地到现在才捣鼓出这么一个博客，希望自己能坚持写作下去吧。","categories":[],"tags":[{"name":"hello","slug":"hello","permalink":"http://ah-well.github.io/tags/hello/"}]}]}