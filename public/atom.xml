<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Well&#39;s Blog</title>
  
  <subtitle>Everything from Everywhere</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ah-well.github.io/"/>
  <updated>2019-05-24T11:54:06.204Z</updated>
  <id>http://ah-well.github.io/</id>
  
  <author>
    <name>Well Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>inter-css</title>
    <link href="http://ah-well.github.io/2019/05/24/inter-css/"/>
    <id>http://ah-well.github.io/2019/05/24/inter-css/</id>
    <published>2019-05-24T11:41:09.000Z</published>
    <updated>2019-05-24T11:54:06.204Z</updated>
    
    <content type="html"><![CDATA[<ul><li>空元素、行内元素、块级元素<ul><li>span</li></ul></li><li>BFC (Block formatting contexts)<ul><li>浮动和绝对定位元素，非块盒的块容器（诸如：inline-blocks, table-cells 和 table-captions），以及 overflow 值不为 visiable（除非该值已经延伸到视口上） 的块盒，都会为他们的内容创建新的块格式化上下文。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;空元素、行内元素、块级元素&lt;ul&gt;
&lt;li&gt;span&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BFC (Block formatting contexts)&lt;ul&gt;
&lt;li&gt;浮动和绝对定位元素，非块盒的块容器（诸如：inline-blocks, table-c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>inter-js</title>
    <link href="http://ah-well.github.io/2019/05/16/inter-js/"/>
    <id>http://ah-well.github.io/2019/05/16/inter-js/</id>
    <published>2019-05-16T12:20:45.000Z</published>
    <updated>2019-05-17T04:43:47.290Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>call(), apply(), bind()</p><ul><li>这三个函数都是用来完成函数调用，并且设置this指向。 call()和apply()是 ECMAScript3 标准引入，而bind()函数则是在 ECMAScript 5 引入。</li></ul></li><li><p>面向对象 封装、继承、多态</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;call(), apply(), bind()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这三个函数都是用来完成函数调用，并且设置this指向。 call()和apply()是 ECMAScript3 标准引入，而bind()函数则是在 ECMAScript 5 引入。&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>inter-frontend</title>
    <link href="http://ah-well.github.io/2019/05/16/inter-frontend/"/>
    <id>http://ah-well.github.io/2019/05/16/inter-frontend/</id>
    <published>2019-05-16T05:00:04.000Z</published>
    <updated>2019-05-17T04:43:04.783Z</updated>
    
    <content type="html"><![CDATA[<ul><li>前端安全、性能问题<ul><li>XSS 跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意的Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</li><li>CSRF</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;前端安全、性能问题&lt;ul&gt;
&lt;li&gt;XSS 跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意的Scri
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pack</title>
    <link href="http://ah-well.github.io/2019/05/15/pack/"/>
    <id>http://ah-well.github.io/2019/05/15/pack/</id>
    <published>2019-05-15T06:38:51.000Z</published>
    <updated>2019-05-15T09:12:18.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="wepack"><a href="#wepack" class="headerlink" title="wepack"></a>wepack</h3><ul><li><p>webpack一些概念区别</p><ul><li>bundle：是由webpack打包出来的文件</li><li>chunk：是指webpack在进行模块依赖分析的时候，代码分割出来的代码块</li><li>module：是开发中的单个模块</li></ul></li><li><p>webpack gulp比较</p><ul><li>webpack是一个模块打包器，强调的是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源都看成是模块，通过loader和plugin对资源进行处理。</li><li>gulp是一个前端自动化构建工具，强调的是前端开发的工作流程，可以通过配置一系列的task，第一task处理的事情（如代码压缩，合并，编译以及浏览器实时更新等）。然后定义这些执行顺序，来让glup执行这些task，从而构建项目的整个开发流程。自动化构建工具并不能把所有的模块打包到一起，也不能构建不同模块之间的依赖关系。</li></ul></li><li><p>loader plugin</p><ul><li>loader用于加载某些资源文件。因为webpack本身只能打包common.js规范的js文件，对于其他资源如css，img等，是没有办法加载的，这时就需要对应的loader将资源转化，从而进行加载。</li><li>plugin用于扩展webpack的功能。不同于loader，plugin的功能更加丰富，比如压缩打包，优化，不只局限于资源的加载。</li></ul></li><li><p>webpack-dev-server 和 http服务器的区别</p><ul><li>webpack-dev-server使用内存来存储webpack开发环境下的打包文件，并且可以使用模块热更新，比传统的http服务对开发更加有效。</li></ul></li><li><p>devServer配置</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">contentBase,  <span class="comment">// 为文件提供本地服务器</span></span><br><span class="line">port,         <span class="comment">// 监听端口，默认8080</span></span><br><span class="line">inline,       <span class="comment">// 设置为true,源文件发生改变自动刷新页面</span></span><br><span class="line">historyApiFallback  <span class="comment">// 依赖HTML5 history API,如果设置为true,所有的页面跳转指向index.html</span></span><br><span class="line">devServer:&#123;</span><br><span class="line">    contentBase: <span class="string">'./src'</span>         <span class="comment">// 本地服务器所加载的页面所在的目录</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,   <span class="comment">// 不跳转</span></span><br><span class="line">    inline: <span class="literal">true</span>                <span class="comment">// 实时刷新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后我们在根目录下创建一个'webpack.config.js'，在'package.json'添加两个命令用于本地开发和生产发布</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">            <span class="string">"start"</span>: <span class="string">"webpack-dev-server"</span>,</span><br><span class="line">            <span class="string">"build"</span>: <span class="string">"webpack"</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="fis3"><a href="#fis3" class="headerlink" title="fis3"></a>fis3</h3><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;wepack&quot;&gt;&lt;a href=&quot;#wepack&quot; class=&quot;headerlink&quot; title=&quot;wepack&quot;&gt;&lt;/a&gt;wepack&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;webpack一些概念区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bundle：是由webpack打包
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue试题</title>
    <link href="http://ah-well.github.io/2019/05/14/inter-vue/"/>
    <id>http://ah-well.github.io/2019/05/14/inter-vue/</id>
    <published>2019-05-14T15:16:33.000Z</published>
    <updated>2019-05-21T13:32:59.259Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue试题"><a href="#vue试题" class="headerlink" title="vue试题"></a>vue试题</h3><ul><li>vue视图不会更新<ul><li>data里边设置 $set</li></ul></li><li>nextTick()<ul><li>在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中</li></ul></li><li><p>vue路由导航钩子（）</p><ol><li><p>全局导航钩子：分为前置守卫、后置钩子</p><ol><li><p>前置守卫：router.beforeEach</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;);</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do someting</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>next 方法必须要调用，否则钩子函数无法 resolved</p></blockquote><ol><li>to: Route，代表要进入的目标，它是一个路由对象</li><li>from: Route，代表当前正要离开的路由，同样也是一个路由对象</li><li>next: Function，这是一个必须需要调用的方法，而具体的执行效果则依赖 next 方法调用的参数<br>next()：进入管道中的下一个钩子，如果全部的钩子执行完了，则导航的状态就是 confirmed（确认的）<br>next(false)：这代表中断掉当前的导航，即 to 代表的路由对象不会进入，被中断，此时该表 URL 地址会被重置到 from 路由对应的地址<br>next(‘/‘) 和 next({path: ‘/‘})：在中断掉当前导航的同时，跳转到一个不同的地址<br>next(error)：如果传入参数是一个 Error 实例，那么导航被终止的同时会将错误传递给 router.onError() 注册过的回调</li></ol></li><li><p>后置钩子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do someting</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&gt; 不同于前置守卫，后置钩子并没有 next 函数，也不会改变导航本身</span><br></pre></td></tr></table></figure></li><li><p>路由独享的钩子：单个路由独享的导航钩子，它是在路由配置上直接进行定义的</p></li></ol></li></ol></li><li><p>Vuex 状态管理</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue试题&quot;&gt;&lt;a href=&quot;#vue试题&quot; class=&quot;headerlink&quot; title=&quot;vue试题&quot;&gt;&lt;/a&gt;vue试题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vue视图不会更新&lt;ul&gt;
&lt;li&gt;data里边设置 $set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>memory</title>
    <link href="http://ah-well.github.io/2019/05/12/memory/"/>
    <id>http://ah-well.github.io/2019/05/12/memory/</id>
    <published>2019-05-12T12:42:41.000Z</published>
    <updated>2019-05-12T12:43:00.278Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>interview</title>
    <link href="http://ah-well.github.io/2019/04/28/interview/"/>
    <id>http://ah-well.github.io/2019/04/28/interview/</id>
    <published>2019-04-28T04:55:31.000Z</published>
    <updated>2019-05-23T12:59:28.478Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于最近这段时间疯狂面试的体验，决定写一些文字记录下来。<br>一切原因都是自身技术短板太多，以及性格上一定程度的缺陷吧！</p><hr><h3 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h3><ul><li>简历（分电子档和纸质，看情况选择）</li><li>注意下外形（刮胡子之类的）</li><li>刷一波面试题</li><li>背包-雨伞-电源-充电器-充电线-手机</li><li>突出自己的优势（英文阅读、PS、后端基础）</li></ul><h3 id="面试流程"><a href="#面试流程" class="headerlink" title="面试流程"></a>面试流程</h3><ul><li>填写来客访问记录表</li><li>hr面（中间填写一些个人信息以及面试题，偶尔还有一些性格、心理、智商测试的题目 orz）</li><li>技术面（根据题目的反馈来对面试者进行第一次定位，然后在交谈中进行二次定位）</li><li>hr二面（中间可能会有上机操作，也可能有复试）</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>单双休、大小周，薪资，发薪日期</li><li>午休时间、加班情况</li><li>地段</li><li>业务项目（定制的是外包的说辞）、团队稳定</li></ul><hr><h3 id="还需了解"><a href="#还需了解" class="headerlink" title="还需了解"></a>还需了解</h3><ul><li>基础框架</li><li>构建工具</li><li>持续集成</li><li>系统测试</li><li>上线部署</li><li>性能优化</li><li><p>监控统计</p></li><li><p>[ ] 前端跨域、安全、性能</p></li><li style="list-style: none"><input type="checkbox"> http协议、状态码、https</li><li style="list-style: none"><input type="checkbox"> 数据类型（基本、引用），类型判断</li><li style="list-style: none"><input type="checkbox"> 原型链</li><li style="list-style: none"><input type="checkbox"> 懒加载、预加载</li><li><p>[ ] 节流防抖</p></li><li><p>[ ] call bind applay</p></li><li style="list-style: none"><input type="checkbox"> js原生、事件委托、组件开发</li><li style="list-style: none"><input type="checkbox"> 深、浅拷贝</li><li style="list-style: none"><input type="checkbox"> 闭包</li><li style="list-style: none"><input type="checkbox"> 递归函数</li><li style="list-style: none"><input type="checkbox"> 回调函数</li><li style="list-style: none"><input type="checkbox"> 排序、数组去重、一位数组转二维数组</li><li style="list-style: none"><input type="checkbox"> xml、json</li><li><p>[ ] 缓存cookie session</p></li><li><p>[ ] 盒子模型</p></li><li style="list-style: none"><input type="checkbox"> 垂直居中</li><li style="list-style: none"><input type="checkbox"> css属性、css3新特性、动画animation、css hack</li><li style="list-style: none"><input type="checkbox"> 浏览器内核、h5新特性</li><li style="list-style: none"><input type="checkbox"> meta、head标签里的东西</li><li style="list-style: none"><input type="checkbox"> 页面布局</li><li style="list-style: none"><input type="checkbox"> 移动端适配</li><li><p>[ ] 缓存问题、localStorage、sessionStorage、Cookie</p></li><li><p>[ ] vue组件传值</p></li><li style="list-style: none"><input type="checkbox"> 底层原理、生命周期</li><li style="list-style: none"><input type="checkbox"> virtual dom</li><li style="list-style: none"><input type="checkbox"> 路由导航钩子</li><li><p>[ ] 视图不更新 $set</p></li><li><p>[ ] ES6、Promise、await/async</p></li><li style="list-style: none"><input type="checkbox"> shell、cmd、terminal</li><li style="list-style: none"><input type="checkbox"> websocket</li><li style="list-style: none"><input type="checkbox"> AMD、CMD</li><li style="list-style: none"><input type="checkbox"> docker镜像创建、启动、删除</li><li style="list-style: none"><input type="checkbox"> jira TFS</li><li style="list-style: none"><input type="checkbox"> Ionic3+ 打包、测试、热更新</li><li style="list-style: none"><input type="checkbox"> WebGL</li><li style="list-style: none"><input type="checkbox"> F2</li><li><p>[ ] highcharts</p></li><li><p>[ ] rollup、 parcel、grunt、gulp、wepack</p></li><li><p>[ ] 小程序图片批量上传、物联网TCP连接、OOS</p></li><li><p>[ ] mpvue、vant、</p></li><li><p>[ ] 参与开源项目</p></li><li style="list-style: none"><input type="checkbox"> hybird 混合app开发</li><li style="list-style: none"><input type="checkbox"> 微信内嵌h5、浏览器内置h5</li><li style="list-style: none"><input type="checkbox"> react、angular</li><li style="list-style: none"><input type="checkbox"> 微信小程序框架</li><li style="list-style: none"><input type="checkbox"> Linux命令</li><li style="list-style: none"><input type="checkbox"> node</li><li style="list-style: none"><input type="checkbox"> sql语句</li><li><p>[ ] 接口</p></li><li><p>[ ] websocket</p></li><li style="list-style: none"><input type="checkbox"> oss、物联网、连接方式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;鉴于最近这段时间疯狂面试的体验，决定写一些文字记录下来。&lt;br&gt;一切原因都是自身技术短板太多，以及性格上一定程度的缺陷吧！&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;面试准备&quot;&gt;&lt;a href=&quot;#面试准备&quot; class=&quot;headerlink&quot; title=&quot;面试准备&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLearn</title>
    <link href="http://ah-well.github.io/2019/04/11/gitLearn/"/>
    <id>http://ah-well.github.io/2019/04/11/gitLearn/</id>
    <published>2019-04-11T07:56:23.000Z</published>
    <updated>2019-04-17T16:29:27.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><blockquote><p>linus用C语言写的分布式版本控制系统。前者有CVS、SVN这些集中式的版本控制系统，但速度慢，且需联网，另有一些系统比这两者好用，不过需要付费，与Linux的开源精神不符，如BitKeeper。也正是它的东家BitMover公司因为开发Samba的Andrew试图破解BitKeeper的协议（据说不止他一个），要收回Linux社区的免费使用权，才迫使Linus在两周之内自己动手用C写了一个分布式版本控制系统。并在一个月内转移Linux的源码由Git来管理了。</p></blockquote><hr><h2 id="集中式vs分布式"><a href="#集中式vs分布式" class="headerlink" title="集中式vs分布式"></a>集中式vs分布式</h2><ul><li>集中式和分布式，一个版本对应多个版本</li><li>集中式必须联网才能工作，无网络状态下无法回退到之前的某个版本</li><li><p>Git速度快、灵活，任意两个开发者之间可以很容易的解决冲突。</p><ul><li>Git代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。学习周期长</li></ul></li></ul><hr><h2 id="Git基本概念"><a href="#Git基本概念" class="headerlink" title="Git基本概念"></a>Git基本概念</h2><ul><li>工作区：就是你在电脑里能看到的目录。</li><li>暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><h3 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h3><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li><p>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</p><p><img src="https://7n.w3cschool.cn/attachments/day_160929/201609291518243574.png" alt="工作流"></p></li></ul><h3 id="git创建仓库"><a href="#git创建仓库" class="headerlink" title="git创建仓库"></a>git创建仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git init                    在当前目录下创建Git仓库</span><br><span class="line">git init newrepo            使用指定目录作为Git仓库</span><br><span class="line">git add                     命令可将该文件添加到缓存</span><br><span class="line"></span><br><span class="line">git status                  命令用于查看项目的当前状态</span><br><span class="line">git status -s               简短的结果输出。如果没加该参数会详细输出内容</span><br><span class="line">git diff                    显示已写入缓存与已修改但尚未写入缓存的改动的区别</span><br><span class="line">  git diff --cached         查看已缓存的改动</span><br><span class="line">  git diff HEAD             查看已缓存的与未缓存的所有改动</span><br><span class="line">  git diff --stat           显示摘要而非整个diff</span><br><span class="line"></span><br><span class="line">git commit                  记录缓存区的快照</span><br><span class="line">  git commit -m             记录缓存提供提交注释</span><br><span class="line">  git commit -a             跳过git add 提交缓存的流程</span><br><span class="line"></span><br><span class="line">git reset HEAD              取消缓存已缓存的内容</span><br><span class="line">  git reset HEAD -- [文件名] </span><br><span class="line">git rm                      将文件从缓存区中移除，默认情况下，会将文件从缓存区和你的硬盘中（工作目录）删除      </span><br><span class="line">  git rm --cached           在工作目录中留着该文件，仅删除缓存区的文件</span><br><span class="line">  git mv                    相当于git rm --cached 有点多余</span><br><span class="line"></span><br><span class="line">// 初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</span><br><span class="line">// 如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</span><br><span class="line">git add *.c         </span><br><span class="line">git add README</span><br><span class="line">git commit -m &apos;initial project version&apos;</span><br><span class="line"></span><br><span class="line">// 从现有仓库克隆，如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)           创建分支</span><br><span class="line">git checkout (branchname)         切换分支</span><br><span class="line">git merge                         合并分支</span><br><span class="line"></span><br><span class="line">git branch                        列出分支</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Git&quot;&gt;&lt;a href=&quot;#什么是Git&quot; class=&quot;headerlink&quot; title=&quot;什么是Git&quot;&gt;&lt;/a&gt;什么是Git&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;linus用C语言写的分布式版本控制系统。前者有CVS、SVN这些集中式的版本控制
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>code</title>
    <link href="http://ah-well.github.io/2019/04/04/code/"/>
    <id>http://ah-well.github.io/2019/04/04/code/</id>
    <published>2019-04-04T08:39:47.000Z</published>
    <updated>2019-04-17T16:29:27.497Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>函数式编程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>].map(<span class="built_in">parseInt</span>) <span class="comment">// [2, NaN, NaN]</span></span><br></pre></td></tr></table></figure><ul><li>因为 map 的算子是有两个参数的，第一个参数是被迭代数组的元素，第二个参数是该元素的下标。所以 [‘2’, ‘3’, ‘4’].map(parseInt) 实际上相当于执行了 [parseInt(‘2’, 0), parseInt(‘3’, 1), parseInt(‘4’, 2)]，结果就变成了 [2, NaN, NaN] 了。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数式编程&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
      
    
    </summary>
    
    
      <category term="题目" scheme="http://ah-well.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>JS Object</title>
    <link href="http://ah-well.github.io/2019/04/04/JSObject/"/>
    <id>http://ah-well.github.io/2019/04/04/JSObject/</id>
    <published>2019-04-04T03:36:07.000Z</published>
    <updated>2019-04-17T16:29:27.496Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>在JavaScript的世界里万物皆对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>; <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'str'</span>; <span class="comment">// 'string'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.abs; <span class="comment">// 'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// 'object'</span></span><br></pre></td></tr></table></figure><ul><li>可见，number、string、boolean、function和undefined有别于其他类型。特别注意null的类型是object，Array的类型也是object，如果我们用typeof将无法区分出null、Array和通常意义上的object——{}。</li></ul></li><li><p>注意一下几点</p><ul><li>不要使用new Number()、new Boolean()、new String()创建包装对象；</li><li>用parseInt()或parseFloat()来转换任意类型到number；</li><li>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</li><li>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {…}；</li><li>typeof操作符可以判断出number、boolean、string、function和undefined；</li><li>判断Array要使用Array.isArray(arr)；</li><li>判断null请使用myVar === null；</li><li>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’；</li><li>函数内部判断某个变量是否存在用typeof myVar === ‘undefined’。</li></ul></li><li><p>Date 里的月份是从0开始</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;在JavaScript的世界里万物皆对象&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录sublime的一些快捷键和插件</title>
    <link href="http://ah-well.github.io/2019/04/03/sublime/"/>
    <id>http://ah-well.github.io/2019/04/03/sublime/</id>
    <published>2019-04-03T09:05:58.000Z</published>
    <updated>2019-04-17T16:29:27.516Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>SublimeLinter        </li><li>Sublime CodeIntel </li><li>Bracket Highlighter</li><li>CSScomb </li><li>SublimeTmpl          =快速生成文件模板</li><li>SideBarEnhancements</li><li>ColorPicker          ctrl+shift+c</li><li>Tag                  = Html格式化</li><li>GBK to UTF8         =GBK转黄成UTF8</li><li>Alignment            Ctrl+Alt+A</li><li>Emmet               </li><li>Prefixr             </li><li>AutoFileName</li><li>CodeFormatter</li><li>ConvertToUTF8</li><li>DocBlockr</li><li>JsFormat</li><li>Terminal Ctrl+Shift+T呼出命令行窗口</li><li>git：git</li><li>jQuery：jQuery</li><li>ConvertToUTF8：转码成utf-8，解决乱码</li><li>Sass</li><li>LESS</li><li>Less2CSS</li><li>功能：编译Less</li><li>简介：监测到文件改动时，编译保存为.css文件</li><li>GOanything</li><li>IMESupport</li><li>功能：sublime中文输入法</li><li>Ctrl + Shift + P →输入pci →输入IMESupport →回车</li><li>FileDiffs  比较代码不同</li><li>CanIUse 如果您想检查浏览器是否支持你包括在你的代码中的CSS和HTML元素，那么这是你需要的插件。所有您需要做的就是选择有疑问的元素，插件将为你做其余的事情。</li><li>Tag HTML/XML标签缩进、补全、排版和校验工具</li><li>Trimmer  </li><li>TrailingSpaces</li><li>Trimmer</li><li>Clipboard History</li><li>功能：粘贴板历史记录</li><li>MarkdownEditing<br>PHPTidy             =排版PHP代码</li><li>YUI Compressor      =压缩JS和CSS文件</li><li>Clipboard History   = 剪贴板历史记录</li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>光标类<ul><li>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。</li><li>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</li><li>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</li><li>Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</li><li>Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</li><li>Ctrl+M 光标移动至括号内结束或开始的位置。</li><li>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</li><li>Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</li><li>Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。</li><li>Ctrl+Shift+] 选中代码，按下快捷键，展开代码。</li><li>Ctrl+K+0 展开所有折叠代码。</li><li>Ctrl+← 向左单位性地移动光标，快速移动光标。</li><li>Ctrl+→ 向右单位性地移动光标，快速移动光标。</li><li>shift+↑ 向上选中多行。</li><li>shift+↓ 向下选中多行。</li><li>Shift+← 向左选中文本。</li><li>Shift+→ 向右选中文本。</li><li>Ctrl+Shift+← 向左单位性地选中文本。</li><li>Ctrl+Shift+→ 向右单位性地选中文本。</li><li>Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</li><li>Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</li><li>Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。</li><li>Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。</li></ul></li><li>编辑类<ul><li>Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</li><li>Ctrl+Shift+D  复制光标所在整行，插入到下一行。</li><li>Tab       向右缩进。</li><li>Shift+Tab 向左缩进。</li><li>Ctrl+K+K  从光标处开始删除代码至行尾。</li><li>Ctrl+Shift+K 删除整行。</li><li>Ctrl+/    注释单行。</li><li>Ctrl+Shift+/ 注释多行。</li><li>Ctrl+K+U  转换大写。</li><li>Ctrl+K+L  转换小写。</li><li>Ctrl+Z    撤销。</li><li>Ctrl+Y    恢复撤销。</li><li>Ctrl+U    软撤销，感觉和 Gtrl+Z 一样。</li><li>Ctrl+F2   设置书签</li><li>Ctrl+T    左右字母互换。</li><li>F6        单词检测拼写</li></ul></li><li>搜索类<ul><li>Ctrl+F        打开底部搜索框，查找关键字。</li><li>Ctrl+shift+F  在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</li><li>Ctrl+P        打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</li><li>Ctrl+G        打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。</li><li>Ctrl+R        打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。</li><li>Ctrl+：       打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</li><li>Ctrl+Shift+P  打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</li><li>Esc           退出光标多行选择，退出搜索框，命令框等。</li></ul></li><li>显示类<ul><li>Ctrl+Tab      按文件浏览过的顺序，切换当前窗口的标签页。</li><li>Ctrl+PageDown 向左切换当前窗口的标签页。</li><li>Ctrl+PageUp   向右切换当前窗口的标签页。</li><li>Alt+Shift+1   窗口分屏，恢复默认1屏（非小键盘的数字）</li><li>Alt+Shift+2   左右分屏-2列</li><li>Alt+Shift+3   左右分屏-3列</li><li>Alt+Shift+4   左右分屏-4列</li><li>Alt+Shift+5   等分4屏</li><li>Alt+Shift+8   垂直分屏-2屏</li><li>Alt+Shift+9   垂直分屏-3屏</li><li>Ctrl+K+B      开启/关闭侧边栏。</li><li>F11           全屏模式</li><li>Shift+F11     免打扰模式</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SublimeLinter        &lt;/li&gt;
&lt;li&gt;Sublime CodeIntel &lt;/li&gt;
&lt;li&gt;Brack
      
    
    </summary>
    
    
      <category term="编辑器" scheme="http://ah-well.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>something</title>
    <link href="http://ah-well.github.io/2019/04/03/something/"/>
    <id>http://ah-well.github.io/2019/04/03/something/</id>
    <published>2019-04-03T06:21:38.000Z</published>
    <updated>2019-05-24T05:56:02.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="something-else"><a href="#something-else" class="headerlink" title="something else"></a>something else</h3><ul><li>Any words I won’t say to them, I only want to develop myself firstly.</li><li>I am tired.And I have to keep sadness and grief away from me.</li><li>Now I should read more technical books and practice more codes.</li><li>Anything I won’t think about all the day, just do it.</li><li><p>I will keep myself learning something new, both technology and life.</p></li><li><p>怎么说吧，现阶段挺尴尬的，周围也尽是相似的风景，坚持自己的初心吧。</p></li><li>掘金url hash</li><li>nodejs、混合app、</li><li>flutter、</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;something-else&quot;&gt;&lt;a href=&quot;#something-else&quot; class=&quot;headerlink&quot; title=&quot;something else&quot;&gt;&lt;/a&gt;something else&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Any words I won’
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>computer</title>
    <link href="http://ah-well.github.io/2019/04/02/computer/"/>
    <id>http://ah-well.github.io/2019/04/02/computer/</id>
    <published>2019-04-02T10:06:42.000Z</published>
    <updated>2019-04-17T16:29:27.498Z</updated>
    
    <content type="html"><![CDATA[<ul><li>二进制</li><li>二叉树</li><li>进程</li><li>线程</li><li>网络协议</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;二进制&lt;/li&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;li&gt;网络协议&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="计算机" scheme="http://ah-well.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>js basic</title>
    <link href="http://ah-well.github.io/2019/04/02/js/"/>
    <id>http://ah-well.github.io/2019/04/02/js/</id>
    <published>2019-04-02T06:30:43.000Z</published>
    <updated>2019-04-17T16:29:27.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js-变量（大小写敏感）"><a href="#js-变量（大小写敏感）" class="headerlink" title="js 变量（大小写敏感）"></a>js 变量（大小写敏感）</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>Number（数字）</li><li>String（字符串）</li><li>Boolean（布尔）</li><li>Symbol（符号）    （第六版新增）</li><li>Object（对象）     - 由键-值组成的无序集合<ul><li>Function（函数） (严格意义上也算Object)</li><li>Array（数组）    - 有序集合</li><li>Date（日期）</li><li>RegExp（正则表达式）</li></ul></li><li>Null（空）</li><li>Undefined（未定义）</li></ul><p>JavaScript 还有一种内置Error（错误）类型</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul><li><p>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>;      <span class="comment">// 整数123</span></span><br><span class="line"><span class="number">0.456</span>;    <span class="comment">// 浮点数0.456</span></span><br><span class="line"><span class="number">1.2345e3</span>; <span class="comment">// 科学计数法表示1.2345x1000，等同于1234.5</span></span><br><span class="line"><span class="number">-99</span>;      <span class="comment">// 负数</span></span><br><span class="line"><span class="literal">NaN</span>;      <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></span><br><span class="line"><span class="literal">Infinity</span>; <span class="comment">// 表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span></span><br></pre></td></tr></table></figure></li><li><p>0.1 + 0.2 = 0.30000000000000004</p></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>JavaScript 中的字符串是一串Unicode 字符序列</li></ul><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><ul><li>通过布尔运算计算出来的结果</li><li><h3 id="undefined-null"><a href="#undefined-null" class="headerlink" title="undefined null"></a>undefined null</h3></li><li>JavaScript 允许声明变量但不对其赋值，一个未被赋值的变量就是 undefined 类型。还有一点需要说明的是，undefined 实际上是一个不允许修改的常量。</li><li>null表示一个空值（non-value），必须使用null关键字才能访问</li></ul><h3 id="strict模式"><a href="#strict模式" class="headerlink" title="strict模式"></a>strict模式</h3><p>JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span>; <span class="comment">// i现在是全局变量</span></span><br></pre></td></tr></table></figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>JavaScript用一个{…}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。</li><li><p>访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用’’括起来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaohong = &#123;</span><br><span class="line">  name: <span class="string">'小红'</span>,</span><br><span class="line">  <span class="string">'middle-school'</span>: <span class="string">'No.1 Middle School'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>xiaohong的属性名middle-school不是一个有效的变量，就需要用’’括起来。访问这个属性也无法使用.操作符，必须用[‘xxx’]来访问：</li></ul></li><li>如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回undefined：</li><li>由于JavaScript的对象是动态类型(这意味着相同的变量可用作不同的类型)，你可以自由地给一个对象添加或删除属性：</li><li><p>如果我们要检测xiaoming是否拥有某一属性，可以用in操作符, 不过要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  name: <span class="string">'小明'</span>,</span><br><span class="line">  birth: <span class="number">1990</span>,</span><br><span class="line">  school: <span class="string">'No.1 Middle School'</span>,</span><br><span class="line">  height: <span class="number">1.70</span>,</span><br><span class="line">  weight: <span class="number">65</span>,</span><br><span class="line">  score: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true</span></span><br><span class="line"><span class="string">'grade'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  name: <span class="string">'小明'</span></span><br><span class="line">&#125;;</span><br><span class="line">xiaoming.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></span><br><span class="line">xiaoming.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明空对象的两种方法</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>因为toString定义在object对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性。要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法</p></li><li></li></ul><h3 id="声明变量关键字-let-const-var"><a href="#声明变量关键字-let-const-var" class="headerlink" title="声明变量关键字 let const var"></a>声明变量关键字 let const var</h3><ul><li>let 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。</li><li>const 允许声明一个不可变的常量。这个常量在定义域内总是可见的。</li><li>var 是最常见的声明变量的关键字。它没有其他两个关键字的种种限制。这是因为它是传统上在 JavaScript 声明变量的唯一方法。使用 var 声明的变量在它所声明的整个函数都是可见的。</li></ul><blockquote><p>JavaScript 与其他语言的（如 Java）的重要区别是在 JavaScript 中语句块（blocks）是没有作用域的，只有函数有作用域。因此如果在一个复合语句中（如 if 控制结构中）使用 var 声明一个变量，那么它的作用域是整个函数（复合语句在函数中）。 但是从 ECMAScript Edition 6 开始将有所不同的， let 和 const 关键字允许你创建块作用域的变量。</p></blockquote><h3 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h3><ul><li>用new来声明。JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>Array.length 并不总是等于数组中元素的个数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"hen"</span>];</span><br><span class="line">a[<span class="number">100</span>] = <span class="string">"fox"</span>;</span><br><span class="line">a.length; <span class="comment">// 101</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>for</li><li><p>for…of循环，ES2015 引入了更加简洁的，可以用它来遍历可迭代对象，例如数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> currentValue <span class="keyword">of</span> a) &#123;</span><br><span class="line">  <span class="comment">// Do something with currentValue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for…in  注意，如果有人向 Array.prototype 添加了新的属性，使用这样的循环这些属性也同样会被遍历。所以并不推荐使用这种方法遍历数组：</p></li><li>forEach()</li><li>while</li><li>do…while</li></ul><blockquote><p>do…while循环体会至少执行1次，而for和while循环则可能一次都不执行。</p></blockquote><h3 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h3><ul><li>执行环境（execution context，为简单起见，有时也称为“环境”）是 JavaScript 中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。</li><li>全局执行环境是最外围的一个执行环境。根据 ECMAScript 实现所在的宿主环境不同，表示执行环境的对象也不一样。在 Web 浏览器中，全局执行环境被认为是 window 对象（第 7 章将详细讨论），因此所有全局变量和函数都是作为 window 对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。</li><li>每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript 程序中的执行流正是由这个方便的机制控制着。</li><li>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</li><li><p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。</p></li><li><p>函数参数也被当作变量来对待，因此其访问规则与执行环境中的其他变量相同。</p></li></ul><hr><p>P.S.本文部分内容参考了 <a href="https://www.liaoxuefeng.com" target="_blank" rel="noopener">廖雪峰博客</a> 、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN Web docs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js-变量（大小写敏感）&quot;&gt;&lt;a href=&quot;#js-变量（大小写敏感）&quot; class=&quot;headerlink&quot; title=&quot;js 变量（大小写敏感）&quot;&gt;&lt;/a&gt;js 变量（大小写敏感）&lt;/h2&gt;&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="js" scheme="http://ah-well.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>language leraning</title>
    <link href="http://ah-well.github.io/2019/03/22/language/"/>
    <id>http://ah-well.github.io/2019/03/22/language/</id>
    <published>2019-03-22T02:55:14.000Z</published>
    <updated>2019-04-28T06:43:22.235Z</updated>
    
    <content type="html"><![CDATA[<p>  偶尔还是得学习下一两门外语的语言规则，发音什么的一边去</p><ul><li>from zero to hero</li><li>underdog  弱旅（实力比较弱的队伍，俗称下狗）</li><li>功不唐捐 佛家语，指功夫不会白白地抛弃。”唐”意为“白白的，徒然的”。</li><li>You will end up reinventing Wordpress, in a horrible way. 你将以一种糟糕的方式重新使用wp</li><li>tit for tat 以牙还牙</li></ul><h3 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h3><ul><li>end up      &lt;非正&gt;（以…）结束; 最终成为[变得]; 最后处于;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  偶尔还是得学习下一两门外语的语言规则，发音什么的一边去&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from zero to hero&lt;/li&gt;
&lt;li&gt;underdog  弱旅（实力比较弱的队伍，俗称下狗）&lt;/li&gt;
&lt;li&gt;功不唐捐 佛家语，指功夫不会白白地抛弃。”唐”意为“白白的，
      
    
    </summary>
    
    
      <category term="learn" scheme="http://ah-well.github.io/tags/learn/"/>
    
      <category term="English" scheme="http://ah-well.github.io/tags/English/"/>
    
      <category term="Japanese" scheme="http://ah-well.github.io/tags/Japanese/"/>
    
  </entry>
  
  <entry>
    <title>Gallery</title>
    <link href="http://ah-well.github.io/2019/01/15/Gallery/"/>
    <id>http://ah-well.github.io/2019/01/15/Gallery/</id>
    <published>2019-01-15T09:45:50.000Z</published>
    <updated>2019-04-17T16:29:27.494Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="相册" scheme="http://ah-well.github.io/tags/%E7%9B%B8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>记一次工作之余的体会</title>
    <link href="http://ah-well.github.io/2018/08/10/winetable/"/>
    <id>http://ah-well.github.io/2018/08/10/winetable/</id>
    <published>2018-08-09T16:48:53.000Z</published>
    <updated>2019-04-17T16:29:27.518Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">文章需要访问密码！</h3><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder="回车确认"> <label for="pass">请输入访问密码</label> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      PS：文章需要密码才能查看全文！&lt;/br&gt;
    
    </summary>
    
      <category term="code" scheme="http://ah-well.github.io/categories/code/"/>
    
      <category term="blog" scheme="http://ah-well.github.io/categories/code/blog/"/>
    
    
      <category term="酒桌场合" scheme="http://ah-well.github.io/tags/%E9%85%92%E6%A1%8C%E5%9C%BA%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>前端与协议</title>
    <link href="http://ah-well.github.io/2018/08/03/protocol/"/>
    <id>http://ah-well.github.io/2018/08/03/protocol/</id>
    <published>2018-08-02T16:53:53.000Z</published>
    <updated>2019-04-17T16:29:27.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协议的定义"><a href="#协议的定义" class="headerlink" title="协议的定义"></a>协议的定义</h1><ul><li>前端与服务端之间的交互数据通信，可以认为是全后端开发者之间主观协商形成的一层数据接口规范。</li></ul><hr><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>http协议</li><li>基于SSL(Secure Sockets Layer,安全套接字层)的https协议</li><li>移动端Web脚本与移动端Native原生程序交互的协议</li><li>HTML5的WebSocket实时通信协议</li><li>与服务端交互的RESTful协议</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;协议的定义&quot;&gt;&lt;a href=&quot;#协议的定义&quot; class=&quot;headerlink&quot; title=&quot;协议的定义&quot;&gt;&lt;/a&gt;协议的定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;前端与服务端之间的交互数据通信，可以认为是全后端开发者之间主观协商形成的一层数据接口规范。&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="code" scheme="http://ah-well.github.io/categories/code/"/>
    
      <category term="blog" scheme="http://ah-well.github.io/categories/code/blog/"/>
    
    
      <category term="前端" scheme="http://ah-well.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="协议" scheme="http://ah-well.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>压抑的一天</title>
    <link href="http://ah-well.github.io/2018/07/15/sad/"/>
    <id>http://ah-well.github.io/2018/07/15/sad/</id>
    <published>2018-07-15T15:36:53.000Z</published>
    <updated>2019-04-17T16:29:27.511Z</updated>
    
    <content type="html"><![CDATA[<ul><li>搬完新家的第一天，跟家里人在微信通了几次电话和视频。恰巧最近几天碰上台风天气，昨晚没带伞淋了一身的雨水，抬抬头仰望路灯下微微倾斜的雨滴，显得有些凄冷。</li><li>心里一直惦记着几件事，一个是 6k，一个是未知的前途，兜兜转转，总觉得自己能力不足，干不了什么事情，对待身边的亲人有时候又太苛刻。对自己的父亲表示出疑心，导致他内心对我的一番悲叹。这么多年了，我是一点一点长大了，他又是在一点一点老去……</li><li>这个时间段，三弟没打工去龙港学电商，家里那边电器行情不景气，老妈吃着苦跑去夹铁，二弟又是做三歇四，老豆他又只能靠记码收别人的脸色账。我实在是不知道自己现在还能到坚持什么时候，自己给自己积极的暗示真的很重要，有时候又很希望别人能够拉我一把，不过现实终究是不可能的。始终还是得靠自己突破这层障碍。</li><li>细细想想我真的时间不多了，</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;搬完新家的第一天，跟家里人在微信通了几次电话和视频。恰巧最近几天碰上台风天气，昨晚没带伞淋了一身的雨水，抬抬头仰望路灯下微微倾斜的雨滴，显得有些凄冷。&lt;/li&gt;
&lt;li&gt;心里一直惦记着几件事，一个是 6k，一个是未知的前途，兜兜转转，总觉得自己能力不足，干不了什
      
    
    </summary>
    
      <category term="生活" scheme="http://ah-well.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="bad" scheme="http://ah-well.github.io/tags/bad/"/>
    
  </entry>
  
  <entry>
    <title>时间表</title>
    <link href="http://ah-well.github.io/2018/07/11/schedule/"/>
    <id>http://ah-well.github.io/2018/07/11/schedule/</id>
    <published>2018-07-11T03:40:30.000Z</published>
    <updated>2019-04-17T16:29:27.512Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">文章需要访问密码！</h3><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder="回车确认"> <label for="pass">请输入访问密码</label> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      PS：文章需要密码才能查看全文！&lt;/br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://ah-well.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="杂念" scheme="http://ah-well.github.io/tags/%E6%9D%82%E5%BF%B5/"/>
    
  </entry>
  
</feed>
